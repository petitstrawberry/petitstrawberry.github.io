!function(){var e={96:function(e,t,n){var o="Expected a function",i=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,d=/^0o[0-7]+$/i,l=parseInt,u="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")(),f=Object.prototype.toString,m=Math.max,h=Math.min,p=function(){return s.Date.now()};function g(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function w(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(g(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=g(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=a.test(e);return n||d.test(e)?l(e.slice(2),n?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var i=!0,r=!0;if("function"!=typeof e)throw new TypeError(o);return g(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),function(e,t,n){var i,r,a,d,l,u,c=0,s=!1,f=!1,y=!0;if("function"!=typeof e)throw new TypeError(o);function b(t){var n=i,o=r;return i=r=void 0,c=t,d=e.apply(o,n)}function v(e){return c=e,l=setTimeout(k,t),s?b(e):d}function x(e){var n=e-u;return void 0===u||n>=t||n<0||f&&e-c>=a}function k(){var e=p();if(x(e))return M(e);l=setTimeout(k,function(e){var n=t-(e-u);return f?h(n,a-(e-c)):n}(e))}function M(e){return l=void 0,y&&i?b(e):(i=r=void 0,d)}function C(){var e=p(),n=x(e);if(i=arguments,r=this,u=e,n){if(void 0===l)return v(u);if(f)return l=setTimeout(k,t),b(u)}return void 0===l&&(l=setTimeout(k,t)),d}return t=w(t)||0,g(n)&&(s=!!n.leading,a=(f="maxWait"in n)?m(w(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),C.cancel=function(){void 0!==l&&clearTimeout(l),c=0,i=u=r=l=void 0},C.flush=function(){return void 0===l?d:M(p())},C}(e,t,{leading:i,maxWait:t,trailing:r})}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),function(){"use strict";const e=n(96);function t(e,t=document.body){return"string"==typeof t&&(t=document.querySelector(t)),t.querySelector(e)}function o(e,t={},...n){const o=document.createElement(e);return Object.keys(t).forEach((e=>{o.setAttribute(e,t[e])})),n.forEach((e=>{"string"==typeof e&&(e=document.createTextNode(e)),o.appendChild(e)})),o}function i(e,n){return"string"==typeof e&&(e=t(e)),e.classList.remove(n),e}function r(e,n){return"string"==typeof e&&(e=t(e)),e.classList.add(n),e}function a(e,n){return"string"==typeof e&&(e=t(e)),e.classList.contains(n)}function d(e,n){"string"==typeof e&&(e=t(e)),Object.keys(n).forEach((t=>{e.style[t]=n[t]}))}function l(n,o,i=0,r=document.body,a={}){"string"==typeof r&&(r=t(r)),i>0?r.addEventListener(n,e(o,i),a):r.addEventListener(n,o,a)}const u={};function c(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}u.get=e=>window.localStorage.getItem(e),u.set=(e,t)=>{null==t?t="":"string"!=typeof t&&(t=JSON.stringify(t)),window.localStorage.setItem(e,t)};const s={darkCode:["c","f","6","9"],lightCode:["a","b","c","d","e","f"],textCode:["1a2a3a","2a3a4a","3a4a5a","4a5a6a","5a6a7a","6a7a8a","7a8a9a"],grayCode:["aaa","bbb","ccc","ddd"],lightGrayCode:["e2e2e2","e7e7e7","ececec"],deepGrayCode:["222","333","444"],dark:()=>{let e="";for(let t=0;3!==t;t++){let t=s.darkCode[c(0,s.darkCode.length)];e+=t+t}return"#"+e},light:()=>{let e="";for(let t=0;6!==t;t++)e+=s.lightCode[c(0,s.lightCode.length)];return"#"+e},gray:()=>{let e=c(0,s.grayCode.length);return"#"+s.grayCode[e]},lightGray:()=>{let e=c(0,s.lightGrayCode.length);return"#"+s.lightGrayCode[e]},deepGray:()=>{let e=c(0,s.deepGrayCode.length);return"#"+s.deepGrayCode[e]},text:(e=0,t=7)=>{let n=c(e,t);return"#"+s.textCode[n]}};s.deepText=s.text.bind(s,0,2),s.mediumText=s.text.bind(s,2,5),s.lightText=s.text.bind(s,5,6);var f=(function(e,...t){return function(){let n=e.slice();return t.forEach(((e,t)=>{n[t]+=s[e]()})),n.join("").replace(/\s{2}/gm," ")}})`
  .wild-mode code {
    background: ${"lightGray"}
  }
  .wild-mode .main .article-tags a {
      background: ${"light"};
  }
  .wild-mode .local-info {
      background: ${"light"};
  }
  body.wild-mode,
  .wild-mode .main {
      background: ${"light"};
  }
  .wild-mode th,
  .wild-mode td {
      border-bottom: 1px solid ${"dark"};
  }
  .wild-mode hr {
      border: 1px solid ${"dark"};
  }
  .wild-mode .pagination {
      background: ${"dark"};
  }
  .wild-mode .sidebar {
      background: ${"dark"};
  }
  .wild-mode .header,
  .wild-mode .footer,
  .wild-mode .header .sub-menu li:hover,
  .wild-mode .sidebar a:hover,
  .wild-mode .logo-link,
  .wild-mode .top, .wild-mode .bottom {
      background: ${"dark"};
  }
  .wild-mode .header .menu>li:hover,
  .wild-mode .footer a:hover {
      background: ${"light"};
  }
  .wild-mode .header ul ul {
      box-shadow: 0 0.1em 0.2em 0 ${"dark"};
  }
  .wild-mode .header ul ul,
  .wild-mode .pagination a:hover {
      background: ${"dark"};
  }
  .wild-mode .article-meta,
  .wild-mode .item-meta,
  .wild-mode .footnotes,
  .wild-mode .count,
  .wild-mode .taxonomy-key {
      color: ${"mediumText"};
  }
  .wild-mode .main .article-tags a,
  .wild-mode .local-info,
  .wild-mode .main,
  .wild-mode .main a,
  .wild-mode .terms-list a,
  .wild-mode blockquote.twitter-tweet,
  .wild-mode .sidebar a,
  .wild-mode .taxonomy-key,
  .wild-mode .main .title a,
  .wild-mode .header a,
  .wild-mode .footer a,
  .wild-mode .footer time,
  .wild-mode .pagination a,
  .wild-mode .header .sub-menu a {
      color: ${"deepGray"};
  }
  .wild-mode .icon,
  .wild-mode .footer .icon {
      background: ${"deepGray"};
  }
  `;function m(e,n="px"){d(t(".sidebar"),{width:e+"px"}),d(t(".main"),{marginLeft:e+"px"})}function h(e,t){return a(e.pane,"hide")?(i(e.pane,"hide"),u.set("is_sidebar_hide","0")):(r(e.pane,"hide"),u.set("is_sidebar_hide","1")),t.preventDefault(),t.stopPropagation(),!1}const p=e=>{var n;a(document.body,e)||r(("string"==typeof(n=document.body)&&(n=t(n)),n.className="",n),e),u.set("mode",e)};(function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n})(3),function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),Math.PI;var g=1.70158,w=(function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(g),function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(g),function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(g),2*Math.PI),y=(function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=w);function i(e){return t*Math.pow(2,10*--e)*Math.sin((o-e)/n)}return i.amplitude=function(t){return e(t,n*w)},i.period=function(n){return e(t,n)},i}(1,.3),function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=w);function i(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+o)/n)}return i.amplitude=function(t){return e(t,n*w)},i.period=function(n){return e(t,n)},i}(1,.3));!function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=w);function i(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((o-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((o+e)/n))/2}return i.amplitude=function(t){return e(t,n*w)},i.period=function(n){return e(t,n)},i}(1,.3);const b=function(){let e=t(".top"),n=t(".bottom"),o=document.documentElement.clientHeight/2,i=o+100,r=!1,a=!1,d=!1,l=!1;const u=(e,t,n,o=(()=>{}))=>{const i=()=>{let n=Math.min(e(function(e){return e.duration?Math.min(function(e){const[t]=window.performance.getEntriesByName(e);return t?window.performance.now()-t.startTime:(window.performance.mark(e),0)}(e.id)/e.duration,1):1}(r)),1);n<1?(t(n),window.requestAnimationFrame(i)):(window.performance.clearMarks(r.id),t(n),o())},r={duration:n,id:window.requestAnimationFrame(i)}};function c(t){u(y,(t=>{e.style.top=-t*i+"px",n.style.top=t*i+o+"px"}),1e3,(()=>{d=!1,a=!1,l=!1,r=!1}))}return{loading:()=>{r||(r=!0,u(y,(t=>{e.style.top=-(1-t)*i+"px",n.style.top=(1-t)*i+o+"px"}),1e3,(()=>{a=!0,l&&c()})))},loaded:()=>{r&&(d||(d=!0,a?c():l=!0))}}}();l("DOMContentLoaded",(e=>{b.loading();const n={};n.pane=t(".sidebar"),n.main=t(".main"),n.paneLeft=n.pane.getBoundingClientRect().left,function(e,t){let n=u.get("mode");if(n&&p(n),"wild-mode"===n){let e=o("style",{class:"wild-ele"},u.get("wild_style"));document.body.appendChild(e)}t.loaded()}(0,b),function(e){m(u.get("sidebar_width")),"1"===u.get("is_sidebar_hide")?r(e.pane,"hide"):i(e.pane,"hide")}(n),function(e){l("click",h.bind(null,e),0,".toggle-sidebar")}(n),function(e,n){l("click",(e=>{if(e.preventDefault(),e.stopPropagation(),"theme-switcher-button"===e.target.id)return;if(a(e.target,"export-wild"))return r(".dialog","show"),void t("#theme-name").focus();let i=e.target.dataset.theme;if(i){if(n.loading(),p(i+"-mode"),"wild"===i){const e=t(".wild-ele"),n=f();e?e.innerText=n:document.body.appendChild(o("style",{class:"wild-ele"},n)),u.set("wild_style",n)}n.loaded()}else console.error('Theme name not found, probably missing an "Identifier" field in Config file.')}),0,"#theme-switcher")}(0,b),function(e){const n={last:!1,resizing:!1,resizable:!1};function o(t,n=4){return Math.abs(t-e.pane.getBoundingClientRect().right)<=n}function i(t){n.resizing=!1;let o=e.pane.getBoundingClientRect();var i;(i=o.right-o.left)<=10||u.set("sidebar_width",i)}l("mousedown",(e=>{n.resizable&&(n.resizing=!0)}),0),l("mouseup",i,0),l("keydown",(e=>{e.ctrlKey&&66===e.keyCode&&h()}),0),l("touchstart",(e=>{n.resizing=o(e.touches[0].clientX,10)})),l("touchend",i),function(e,t,n=document.body){l("mousemove",(t=>{e({clientX:t.clientX,clientY:t.clientY,type:t.type})}),t,n,{passive:!0}),l("touchmove",(t=>{e({clientX:t.touches[0].clientX,clientY:t.touches[0].clientY,type:t.type})}),t,n,{passive:!0})}((function(t){n.resizable=o(t.clientX),n.resizing?function(t){let n=t-e.paneLeft;n<=10?r(e.pane,"hide"):m(n)}(t.clientX):"mousemove"===t.type&&t.clientX>10&&n.last!==n.resizable&&(n.resizable?d(document.body,{cursor:"ew-resize"}):d(document.body,{cursor:"auto"}),n.last=n.resizable)}),50,t(".middle"))}(n),function(e,n){l("click",(e=>{i(".dialog","show")}),0,".close-dialog"),l("click",(e=>{const r=t("#theme-name").value.trim();r?/^[a-zA-Z\s-]+$/.test(r)?"light"!==r&&"dark"!==r&&"wild"!==r?(n.loading(),function(e){let t=function(e){let t=u.get("wild_style"),n=e.replace(/\s/g,"-");return t=t.replace(/wild-mode/g,`${n}-mode`),function(e,t){return`/*\nHugo Edidor theme wild mode exported.\nhomepage: https://github.com/sfengyuan/edidor\nUsage:\n1. Throw me to your site root folder/static/css directory, you can rename me to whatever you like.\n2. Copy the code below to your config file.\n\n--------\n[[menu.main]]\nparent = "Theme"\nidentifier = "${e}"\nname = "${t}"\nurl = "#"\nweight = 30\n--------\n\n3. Change the field 'name' and 'weight' to whatever you like. Leave others alone, and don't add your custom field, hugo doesn't support that, though I really hope so :/.\n*/`}(n,e)+t}(e);!function(e,t){const n=o("a",{href:"data:text/plain;charset=utf-8,"+encodeURIComponent(t),download:e,style:{display:"none"}});document.body.appendChild(n),n.click(),document.body.removeChild(n)}(e+".css",t)}(r),i(".dialog","show"),n.loaded()):window.alert("Mess up builtin themes."):window.alert("Only English letters, space, hyphens are allowed."):window.alert("Name is required.")}),0,".export")}(0,b)}),0,document)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,